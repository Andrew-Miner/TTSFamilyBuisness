 Scheduler = {
     schedule = {},
     lastFrame = 0,
     nextFrameCBs = nil
 }

 ScheduledCallback = {
     fixedCallTime = 0,
     repeatSec = nil,
     repeatTimes = nil,
     callbackList = nil
 }

-- TODO: rework to allow for canceling of tasks via task ids

function ScheduledCallback:new(callbackList, delaySeconds, repeatSeconds, repeatTimes)
    local self = setmetatable({}, ScheduledCallback)
    self.fixedCallTime = Time.fixed_time + delaySeconds
    self.repeatSec = repeatSeconds
    self.repeatTimes = repeatTimes
    self.callbackList = callbackList
    return self
end

function Scheduler:newRepeatingTask(callbackList, delaySec, repeatSec, repeatTimes)
    local task = ScheduledCallback:new(callbackList, delaySec, repeatSec, repeatTimes)
    return self:scheduleTask(task)
end

function Scheduler:newTask(callbackList, delaySec)
    local task = ScheduledCallback:new(callbackList, delaySec, nil)
    return self:scheduleTask(task)
end

function Scheduler:scheduleTask(task)
    local id
    repeat
        id = math.random()
    until(not self:containsTaskID(id))
    self.schedule[id] = task
    return id
end

function Scheduler:update()
    local thisFrame = Time.frame_count

    if self.lastFrame < thisFrame and self.nextFrameCBs ~= nil then
        self:executeCBList(self.nextFrameCBs, Time.fixed_time)
        self.nextFrameCBs = nil
    end

    self.lastFrame = thisFrame
    self:scheduleFrame()
end

function Scheduler:scheduleFrame()
    local time = Time.fixed_time
    local delete = {}
    for id,task in pairs(self.schedule) do
        if time > task.fixedCallTime then
            self:addCBList(task)
            if task.repeatSec == nil or task.repeatTimes == 0 then
                table.insert(delete, id)
            else
                task.fixedCallTime = time + task.repeatSec
                task.repeatTimes = task.repeatTimes - 1
            end
        end
    end

    for _,id in ipairs(delete) do
        self.schedule[id] = nil
    end
end

function Scheduler:cancelTask(taskID)
    self.schedule[taskID] = nil
end

function Scheduler:addCBList(task)
    if self.nextFrameCBs == nil then
        self.nextFrameCBs = {}
    end
    table.insert(self.nextFrameCBs, task)
end

function Scheduler:executeCBList(list, time)
    for _,task in ipairs(list) do
        for _,cb in ipairs(task.callbackList) do
            cb(time, task.repeatTimes)
        end
    end
end

function Scheduler:containsTaskID(taskID)
    for id,cb in pairs(self.schedule) do
        if id == taskID then
            return true
        end
    end
    return false
end
