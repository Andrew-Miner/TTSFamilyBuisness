--#include !/Cards/Card

Contract = TargetCard:new('Contract',
                          'Place an opponent\'s mobster on the Hit List.',
                          'Red', 12, true, 'Contract', true,
                          {'Family Influence', 'Mob Power'})

function Contract:new(name, description, count, targetLabel, waitForResponse, responses)
    local o = {}
    setmetatable(o, self)
    self.__index = self

    o.name = name
    o.description = descriptions
    o.count = count
    o.targetLabel = targetLabel
    o.waitForResponse = waitForResponse
    o.responses = responses

    return o
end

function Contract:useScript(gameState, playerColor)
    print(TargetLabel:getTarget())
    local target = getPColorByName(TargetLabel:getTarget())
    print(target)

    if target then
        UI.show('sickButton')
        UI.setAttribute('sickButton', 'visibility', target)
        UI.setAttribute('sickButton', 'textColor', 'white')

        gameState.responder = target
        gameState.anyResponse = false
    end

    return RESPONSE_STATE
end

function Contract:responseScript(gameState, playerColor)
    UI.hide('sickButton')
    if gameState.responderData ~= nil and gameState.responderData.card ~= nil then
        local card = gameState.responderData.card.getName()
        if card == 'Family Influence' then
            return true
        elseif card == 'Mob Power' then
            local player = PlayerList:getPlayer(playerColor)
            if player.mobCount >= 1 then
                -- Add 1 Attacker Mobster to HitList
                local mob = player:removeMobCard()
                HitList:addMobster(mob, false)
            end
            return true
        end
    end

    local responder = PlayerList:getPlayer(gameState.responder)
    if responder.mobCount >= 1 then
        -- Add 1 Defender Mobster to HitList
        local mob = responder:removeMobCard()
        HitList:addMobster(mob, false)
    end
    return false
end

-- Used to check if pick up should be tracked
function Contract:isValidPickUp(gameState, playerColor, object)
    if gameState.id == DECIDING_STATE then
        return true
    end
    return false
end

-- Used to check if useScript should be called
function Contract:isValidDrop(gameState, playerColor, object)
    if gameState.id == DECIDING_STATE then
        return true
    elseif gameState.id == RESPONSE_STATE then
        return self:isResponse(object)
    end
    return false
end

function sick_onClick(player, _, idValue)
    local state = GameManager:getState()
    if state.attackerData == nil or state.attackerData.cardObj == nil then
        Button:hide()
        return
    end

    local p = PlayerList:getWhosTurn()
    state.attackerData.cardObj:responseScript(state, p)
    GameManager:nextTurn()
end
