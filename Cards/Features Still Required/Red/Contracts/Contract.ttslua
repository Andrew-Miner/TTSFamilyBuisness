--#include !/Cards/Card

Contract = Card:new('Contract',
                    'Place an opponent\'s mobster on the Hit List.',
                    'Red', 12, true, true, 'Contract', true,
                    {'Family Influence', 'Mob Power'})

function Contract:new(name, description, count, targetLabel, waitForResponse, responses)
    local self = setmetatable({}, Contract)

    self.name = name
    self.description = description
    self.count = count
    self.targetLabel = targetLabel
    self.waitForResponse = waitForResposne
    self.responses = responses

    return self
end

function Contract:useScript(gameState, playerColor)
    print(TargetLabel:getTarget())
    local target = getPColorByName(TargetLabel:getTarget())
    print(target)

    if target then
        UI.show('sickButton')
        UI.setAttribute('sickButton', 'visibility', target)
        UI.setAttribute('sickButton', 'textColor', 'white')

        gameState.responder = target
        gameState.anyResponse = false
    end

    return RESPONSE_STATE
end

function Contract:responseScript(gameState, playerColor)
    UI.hide('sickButton')
    local card = gameState.responderData.card.getName()
    print(card)
    if card == 'Family Influence' then
        return true
    elseif card == 'Mob Power' then
        local player = PlayerList:getPlayer(playerColor)
        if player.mobCount >= 1 then
            -- Add 1 Attacker Mobster to HitList
            local mob = player:removeMobCard()
            HitList:addMobster(mob, false)
        end
        return true
    else
        local responder = PlayerList:getPlayer(gameState.responder)
        if responder.mobCount >= 1 then
            -- Add 1 Defender Mobster to HitList
            local mob = responder:removeMobCard()
            HitList:addMobster(mob, false)
        end
        return false
    end
end

-- Used to check if pick up should be tracked
function Contract:isValidPickUp(gameState, playerColor, object)
    if gameState.id == DECIDING_STATE then
        return true
    end
    return false
end

-- Used to check if useScript should be called
function Contract:isValidDrop(gameState, playerColor, object)
    print(gameState)
    if gameState.id == DECIDING_STATE then
        return true
    elseif gameState.id == RESPONSE_STATE then
        return contains(self.responses, object.getName(),
        function(obj1, obj2)
            if obj1 == obj2 then
                return true
            end
        end)
    end
    return false
end

function Contract:pickUpEvent(gameState, playerColor)
    if gameState.id == DECIDING_STATE then
        TargetLabel:show()
        TargetLabel:updateTarget(gameState)
    end
end

function Contract:dropEvent(gameState, playerColor)
    if gameState.id == DECIDING_STATE then
        TargetLabel:hide()
    end
end

function Contract:updateEvent(gameState, playerColor)
    if gameState.id == DECIDING_STATE then
        TargetLabel:updateTarget(gameState)
    end
end
