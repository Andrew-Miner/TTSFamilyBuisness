#include !/GlobalIncludes

GameState = {
    id = 0,
    attackerData = nil,
    responder = nil,
    anyResponse = nil,
    responderData = nil
}

function GameState:new(id, attackerData, anyResponce, responder, responderData)
    local self = setmetatable({}, GameState)

    self.id = id
    self.attackerData = attackerData
    self.anyResponse = anyResponse
    self.responder = responder
    self.responderData = responderData

    return self
end

DECIDING_STATE = 1
ACTIVE_STATE = 2
DEFEND_STATE = 3
WIN_STATE = 4

GameManager = {
    scriptsEnabled = true,
    inGame = false,
    gameSetup = false,
    setupDeck = nil,
    gameState = nil
}

function GameManager:onLoad()
    HitList:init()
    self:hideUI()
end

function GameManager:getState()
    return self.gameState
end

function GameManager:setState(state)
    self.gameState = state
end

function GameManager:isInGame()
    return self.inGame
end

function GameManager:isSetup()
    return self.gameSetup
end

function GameManager:enable()
    self.scriptsEnabled = true
end

function GameManager:disable()
    self.scriptsEnabled = false
end

function GameManager:isEnabled()
    return self.scriptsEnabled
end

function GameManager:hideUI()
    UI.hide('targetLabel')
    UI.hide('targetName')
    UI.hide('sickButton')

    UI.hide('counterTime')
    UI.hide('counterCard')
    UI.hide('counterLabel')
    UI.hide('selectTime')
    UI.hide('selectLabel')

    UI.hide('doneButton')
    UI.hide('mobSelection')
end

function GameManager:setupGame()
    if self.inGame then
        self:endGame()
    end

    clearTable()
    HitList:reset()

    spawnCards()
    buildPlayerObjs()
    distributeMobs()
    -- TODO: NOT HITLIST BUT PLAYER OBJ DATA
    if self.scriptsEnabled then
        --HitList:setLock(true)

        Wait.time(function()
            self.setupDeck = Shuffler:getCards()
            self.setupDeck.interactable = false
        end, 1)

        self.gameSetup = true
        self.gameState = GameState:new(DECIDING_STATE)
    else
        --HitList:setLock(false)

        self.gameSetup = false
    end
end

function GameManager:startGame()
    if not self.scriptsEnabled then
        return
    end

    if not self.gameSetup or self.gameState == nil then
        printToAll('Error: Setup the game first!', 'Red')
        return
    end

    if PlayerList:size() > 6 then
        printToAll("Error: Too many players!", 'Red')
        return
    end

    if self.inGame then
        printToAll("Error: Game in progress!", 'Red')
        return
    end


    dealCards()
    Wait.time(function()
        local random = PlayerList:getPlayers()[math.random(PlayerList:size())]
        PlayerList:setTurn(random.color)
        --printToAll(Player[PlayerList:getWhosTurn()].steam_name .. ' goes first!', 'Green')
        Logger:nextTurn(self.gameState)
        Shuffler:getCards().deal(1, PlayerList:getWhosTurn())
    end, 2)

    self.setupDeck.interactable = true
    self.setupDeck = nil
    self.gameSetup = false
    self.inGame = true
end

function GameManager:endGame(victor)
    self.inGame = false
    self.gameState = nil
    self:hideUI()

    Logger:clear()
end

function GameManager:nextTurn(playerColor)

    Wait:time(function() HandTracker:discardCards() end, 0.75)

    local next = playerColor
    if next == nil then
        next = getLeftOf(PlayerList:getWhosTurn())
    end

    if next == PlayerList:getWhosTurn() then
        self:endGame(next)
    else
        self.gameState = GameState:new(DECIDING_STATE)
        PlayerList:setTurn(next)

        Wait.time(function()
            Logger:nextTurn(self.gameState)

            if playerColor == nil then
                Shuffler:dealPlayer(PlayerList:getWhosTurn(), 1)
            else
                Shuffler:dealPlayer(PlayerList:getWhosTurn(), 2)
            end
            HitList:processDraw()
        end, 1.5)
    end
end

function GameManager:onUpdate()
    if not self.inGame or not self.scriptsEnabled then
        return
    end
    Scheduler:update()
    if self.gameState.attackerData ~= nil and self.gameState.attackerData.cardObj ~= nil then
        self.gameState.attackerData.cardObj:updateEvent(self.gameState, PlayerList:getWhosTurn())
    end
end

function GameManager:onPickUp(playerColor, object)
    if not self.inGame or not self.scriptsEnabled then
        return
    end

    local holdData = HandTracker:pickUpEvent(playerColor, object)
    if holdData == nil then
        return
    end

    if self.gameState.id == DECIDING_STATE then
        if playerColor ~= PlayerList:getWhosTurn() or
        holdData.type ~= CARD_TYPE or holdData.owned ~= true then
            return
        end

        if holdData.cardObj:isValidPickUp(self.gameState, playerColor, object) then
            self.gameState.attackerData = holdData
            holdData.cardObj:pickUpEvent(self.gameState, playerColor)
        else
            self.gameState.attackerData = nil
        end
    end
end

function GameManager:onDrop(playerColor, object)
    if not self.inGame or not self.scriptsEnabled then
        return
    end

    local holdData = HandTracker:getHolding(playerColor)
    if holdData == nil or holdData.owned ~= true or
    holdData.card.getGUID() ~= object.getGUID() then
        HandTracker:dropEvent(playerColor, object)
        return
    end

    if self.gameState.id == DECIDING_STATE then
        if playerColor == PlayerList:getWhosTurn() and holdData.type == CARD_TYPE then
            holdData.cardObj:dropEvent(self.gameState, playerColor)

            local discarded = Shuffler:isDiscarded(object)
            if contains(Player[playerColor].getHandObjects(), object) or discarded or
            holdData.cardObj:isValidDrop(self.gameState, playerColor, object) == false then
                -- self.gameState.card = nil
                -- self.gameState.cardObj = nil -- should be gameState.attackerData.cardObj???
                if discarded then
                    Logger:cardDiscarded(self.gameState)
                    self.gameState.attackerData = nil
                    self:nextTurn()
                else
                    self.gameState.attackerData = nil
                end
            else
                HandTracker:addDiscard(holdData.card)
                local expectedState = holdData.cardObj:useScript(self.gameState, playerColor)

                -- NM has to be under useScript because useScript
                -- puts responder into gameState
                Logger:cardPlayed(self.gameState)

                if holdData.cardObj.waitForResponse and expectedState == RESPONSE_STATE then
                    self.gameState.id = RESPONSE_STATE
                elseif self.gameState.id == DECIDING_STATE then
                    self:nextTurn()
                end
            end
        end
    elseif self.gameState.id == RESPONSE_STATE then
        if  self.gameState.anyResponse or self.gameState.responder == playerColor then
            local aData = self.gameState.attackerData
            if aData ~= nil then
                if not contains(Player[playerColor].getHandObjects(), object) and
                aData.cardObj:isValidDrop(self.gameState, playerColor, object) then
                    self.gameState.responder = playerColor
                    self.gameState.responderData = holdData
                    Logger:cardPlayed(self.gameState)
                    HandTracker:addDiscard(holdData.card)
                    if aData.cardObj:responseScript(self.gameState, PlayerList:getWhosTurn()) then
                        self:nextTurn(playerColor)
                    end
                end
            end
        end
    end

    HandTracker:dropEvent(playerColor, object)
end
